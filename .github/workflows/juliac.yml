name: juliac

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    strategy:
      matrix:
        os: ${{ vars.USE_SELF_HOSTED == 'true' && fromJSON('["self-hosted"]') || fromJSON('["ubuntu-22.04", "ubuntu-latest"]') }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: '~1.12.0-rc1'
          arch: x64

      - name: Cache Julia artifacts
        uses: julia-actions/cache@v2

      - name: Build executable
        working-directory: juliac
        run: |
          make

      - name: Test executable
        working-directory: juliac
        run: |
          ./mainc

      - name: Package artifacts
        working-directory: juliac
        run: |
          mkdir -p ../artifacts
          cp mainc ../artifacts/
          cp -r RunwayLibCompiled ../artifacts/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: juliac-build-${{ matrix.os }}
          path: artifacts/

  test-without-julia:
    needs: build-and-test
    strategy:
      matrix:
        os: ${{ vars.USE_SELF_HOSTED == 'true' && fromJSON('["self-hosted"]') || fromJSON('["ubuntu-22.04", "ubuntu-latest"]') }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: juliac-build-${{ matrix.os }}
          path: artifacts/

      - name: Make executable runnable
        run: |
          chmod +x artifacts/mainc

      - name: Test executable without Julia
        run: |
          cd artifacts
          JULIA_DEPOT_PATH=RunwayLibCompiled/share/julia ./mainc

  test-python:
    needs: build-and-test
    strategy:
      matrix:
        os: ${{ vars.USE_SELF_HOSTED == 'true' && fromJSON('["self-hosted"]') || fromJSON('["ubuntu-22.04", "ubuntu-latest"]') }}
        python-version: ['3.9', '3.10', '3.11', '3.12']
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: juliac-build-${{ matrix.os }}
          path: artifacts/

      - name: Install Python dependencies
        working-directory: poseest_py
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest

      - name: Copy library to Python package
        run: |
          # Remove existing symlinked library (if any)
          rm -rf poseest_py/poseest/native/RunwayLibCompiled
          # Copy the built library
          cp -r artifacts/RunwayLibCompiled poseest_py/poseest/native/

      - name: Test Python package (basic tests)
        working-directory: poseest_py
        run: |
          python -m pytest tests/test_poseest.py::TestDataTypes -v

      - name: Test Python package (library integration)
        working-directory: poseest_py
        run: |
          python -m pytest tests/test_poseest.py::TestLibraryIntegration -v

      - name: Test Python package (error handling)
        working-directory: poseest_py
        run: |
          python -m pytest tests/test_poseest.py::TestErrorHandling -v

      - name: Run all Python tests
        working-directory: poseest_py
        run: |
          python -m pytest tests/ -v